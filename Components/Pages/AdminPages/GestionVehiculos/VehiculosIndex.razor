@page "/vehiculos"
@using BlazorBootstrap
@using CarRental.Extensors
@inject VehiculosService VehiculosService
@inject ToastService ToastService
@inject NavigationManager NavigationManager



<PageTitle>Gestión de Vehículos</PageTitle>

<div class="container mt-4">
    <h3>Gestión de Vehículos</h3>

    <div class="row mb-3">
        <div class="col-md-6">
            <input type="text" class="form-control" @bind="searchMarca" @oninput="BuscarVehiculos" placeholder="Buscar por marca..." />
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary" @onclick="CargarVehiculosDisponibles">Ver vehículos disponibles</button>
        </div>
    </div>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Marca</th>
                <th>Modelo</th>
                <th>Año</th>
                <th>Precio/Día</th>
                <th>Disponibilidad</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehiculo in vehiculos)
            {
                <tr>
                    <td>@vehiculo.Marca</td>
                    <td>@vehiculo.Modelo</td>
                    <td>@vehiculo.Año</td>
                    <td>@vehiculo.PrecioPorDia.ToString("C")</td>
                    <td>
                        @if (vehiculo.Disponible)
                        {
                            <span class="badge bg-success">Disponible</span>
                        }
                        else
                        {
                            <span class="badge bg-danger">No Disponible</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditarVehiculo(vehiculo.VehiculoId)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarVehiculo(vehiculo.VehiculoId)">Eliminar</button>
                        <button class="btn btn-info btn-sm" @onclick="() => ActualizarDisponibilidad(vehiculo.VehiculoId, !vehiculo.Disponible)">
                            @if (vehiculo.Disponible)
                            {
                                <span>Marcar como no disponible</span>
                            }
                            else
                            {
                                <span>Marcar como disponible</span>
                            }
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Vehiculo> vehiculos = new();
    private string searchMarca;

    protected override async Task OnInitializedAsync()
    {
        await CargarVehiculos();
    }

    private async Task CargarVehiculos()
    {
        vehiculos = await VehiculosService.ListaVehiculos();
    }

    private async Task BuscarVehiculos()
    {
        if (string.IsNullOrWhiteSpace(searchMarca))
        {
            await CargarVehiculos();
        }
        else
        {
            vehiculos = await VehiculosService.BuscarVehiculosPorMarca(searchMarca);
        }
    }

    private async Task CargarVehiculosDisponibles()
    {
        vehiculos = await VehiculosService.ObtenerVehiculosDisponibles();
    }

    private async Task EditarVehiculo(int vehiculoId)
    {
        // Redirigir al componente de edición
        NavigationManager.NavigateTo($"/vehiculo/editar/{vehiculoId}");
    }

    private async Task EliminarVehiculo(int vehiculoId)
    {
        // Confirmación en JavaScript usando el método confirm
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de eliminar este vehículo?");

        if (confirm)
        {
            var eliminado = await VehiculosService.EliminarVehiculo(vehiculoId);

            if (eliminado)
            {
                ToastService.ShowSuccess("Vehículo eliminado correctamente.");
                await CargarVehiculos(); // Recargar la lista después de eliminar
            }
            else
            {
                ToastService.ShowError("No se pudo eliminar el vehículo.");
            }
        }
    }


    private async Task ActualizarDisponibilidad(int vehiculoId, bool disponible)
    {
        var actualizado = await VehiculosService.ActualizarDisponibilidad(vehiculoId, disponible);
        if (actualizado)
        {
            ToastService.ShowSuccess("Disponibilidad actualizada correctamente.");
            await CargarVehiculos(); // Recargar la lista después de actualizar
        }
        else
        {
            ToastService.ShowError("No se pudo actualizar la disponibilidad.");
        }
    }
}
