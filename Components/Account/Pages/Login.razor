@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CarRental.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #a2aebb; /* Color de fondo claro de la paleta */
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .container {
        display: flex;
        width: 800px;
        height: 400px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
    }

    .illustration {
        flex: 1;
        background: url('https://numeralpaint.com/wp-content/uploads/2021/08/Aesthetic-Porsche-Car-paint-by-numbers.jpg') no-repeat center center;
        background-size: cover;
    }

    .login-form {
        flex: 1;
        background-color: white;
        padding: 40px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

        .login-form h1 {
            margin: 0;
            color: #1c3144; /* Azul oscuro de la paleta */
        }

        .login-form p {
            margin: 10px 0 20px;
            color: #1c3144; /* Azul oscuro */
        }

        .login-form input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .login-form button {
            padding: 10px;
            background-color: #ffba08; /* Amarillo de la paleta */
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px; /* Añadido espacio superior */
        }

            .login-form button:hover {
                background-color: #d00000; /* Rojo de la paleta */
            }

        .login-form a {
            color: #3f88c5; /* Azul claro de la paleta */
            text-decoration: none;
            margin-top: 10px;
        }

            .login-form a:hover {
                text-decoration: underline;
            }

    .login-options {
        margin-bottom: 20px; /* Espacio adicional entre enlaces y botón */
    }

        .login-options a {
            display: block;
            margin-bottom: 10px; /* Espacio entre los enlaces */
        }
</style>

<div class="container">
    <div class="illustration"></div>
    <div class="login-form">
        <h1>Welcome Back!</h1>
        <p>Log in to your account</p>
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <div class="login-input">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="login-input">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Password" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="login-options">
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                    <a href="Account/Register">Create a new account</a>
                </div>
                <button type="submit" class="login-button">Log in</button>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
