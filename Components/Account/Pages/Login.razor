@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CarRental.Data
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Iniciar sesión</PageTitle>

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background-color: #a2aebb; /* Color de fondo claro de la paleta */
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
    }

    .container {
        display: flex;
        width: 800px;
        height: 500px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        border-radius: 10px;
        overflow: hidden;
    }

    .illustration {
        flex: 1;
        background: url('https://urlshort.app/CDE4D4') no-repeat center center;
        background-size: cover;
    }

    .login-form {
        flex: 1;
        background-color: white;
        padding: 40px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

        .login-form h1 {
            margin: 0;
            color: #1c3144; /* Azul oscuro de la paleta */
        }

        .login-form p {
            margin: 10px 0 20px;
            color: #1c3144; /* Azul oscuro */
        }

        .login-form input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        .login-form select {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            appearance: none; /* Quita el estilo predeterminado del select */
            -webkit-appearance: none; /* Quita el estilo del select en Webkit */
            -moz-appearance: none; /* Quita el estilo del select en Firefox */
            background-image: url('https://upload.wikimedia.org/wikipedia/commons/3/38/Down_Arrow_Icon.svg'); /* Flecha hacia abajo */
            background-position: right 10px center;
            background-repeat: no-repeat;
            background-size: 1.2em;
        }

        .login-form button {
            padding: 10px;
            background-color: #ffba08; /* Amarillo de la paleta */
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 20px; /* Añadido espacio superior */
        }

            .login-form button:hover {
                background-color: #d00000; /* Rojo de la paleta */
            }

        .login-form a {
            color: #3f88c5; /* Azul claro de la paleta */
            text-decoration: none;
            margin-top: 10px;
        }

            .login-form a:hover {
                text-decoration: underline;
            }

    .login-options {
        margin-bottom: 20px; /* Espacio adicional entre enlaces y botón */
    }

        .login-options a {
            display: block;
            margin-bottom: 10px; /* Espacio entre los enlaces */
        }
</style>

<div class="container">
    <div class="illustration"></div>
    <div class="login-form">
        <h1>¡Bienvenido de nuevo!</h1>
        <p>Inicia sesión en tu cuenta</p>
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <div class="login-input">
                    <select @bind="Input.Role" class="form-control">
                        <option value="">Seleccionar rol</option>
                        <option value="Admin">Administrador</option>
                        <option value="Cliente">Cliente</option>
                    </select>
                    <ValidationMessage For="() => Input.Role" class="text-danger" />
                </div>

                <div class="login-input">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="Correo electrónico" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="login-input">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Contraseña" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <div class="login-options">
                    <a href="Account/ForgotPassword">¿Olvidaste tu contraseña?</a>
                    <a href="Account/Register">Crear una nueva cuenta</a>
                </div>

                <button type="submit" class="login-button">Iniciar sesión</button>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        if (string.IsNullOrEmpty(Input.Role))
        {
            errorMessage = "Por favor, selecciona un rol.";
            return;
        }

        var user = await UserManager.FindByEmailAsync(Input.Email);

        if (user != null)
        {
            // Check if the role matches
            var roles = await UserManager.GetRolesAsync(user);

            if ((Input.Role == "Admin" && roles.Contains("Admin")) ||
                (Input.Role == "Cliente" && roles.Contains("Cliente")))
            {
                var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
                if (result.Succeeded)
                {
                    Logger.LogInformation("Usuario iniciado sesión.");

                    // Redirigir a la página correspondiente según el rol
                    if (Input.Role == "Admin")
                    {
                        NavigationManager.NavigateTo("/Index/Admin");
                    }
                    else if (Input.Role == "Cliente")
                    {
                        NavigationManager.NavigateTo("/Index/Cliente");
                    }
                }
                else if (result.RequiresTwoFactor)
                {
                    RedirectManager.RedirectTo(
                        "Account/LoginWith2fa",
                        new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
                }
                else if (result.IsLockedOut)
                {
                    Logger.LogWarning("Cuenta de usuario bloqueada.");
                    RedirectManager.RedirectTo("Account/Lockout");
                }
                else
                {
                    errorMessage = "Error: Intento de inicio de sesión inválido.";
                }
            }
            else
            {
                errorMessage = "Error: El usuario no tiene el rol seleccionado.";
            }
        }
        else
        {
            errorMessage = "Usuario no encontrado.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Required]
        public string Role { get; set; } = "";

        [Display(Name = "¿Recordarme?")]
        public bool RememberMe { get; set; }
    }
}
